#### Astronomy / Space Motion

"""
    pvstar(pv::Vector{Vector{Float64}})

Convert star position & velocity vector to catalog coordinates.

# Input (Note 1)

 - `pv`  -- pv-vector (AU, AU/day)

# Output (Note 2)

 - `ra`  -- right ascension (radians)
 - `dec` -- declination (radians)
 - `pmr` -- RA proper motion (radians/year)
 - `pmd` -- Dec proper motion (radians/year)
 - `px`  -- parallax (arcsec)
 - `rv`  -- radial velocity (km/s, positive = receding)

# Note

1) The specified pv-vector is the coordinate direction (and its rate
   of change) for the date at which the light leaving the star reached
   the solar-system barycenter.

2) The star data returned by this function are "observables" for an
   imaginary observer at the solar-system barycenter.  Proper motion
   and radial velocity are, strictly, in terms of barycentric
   coordinate time, TCB.  For most practical applications, it is
   permissible to neglect the distinction between TCB and ordinary
   "proper" time on Earth (TT/TAI).  The result will, as a rule, be
   limited by the intrinsic accuracy of the proper-motion and
   radial-velocity data; moreover, the supplied pv-vector is likely to
   be merely an intermediate result (for example generated by the
   function eraStarpv), so that a change of time unit will cancel out
   overall.

   In accordance with normal star-catalog conventions, the object's
   right ascension and declination are freed from the effects of
   secular aberration.  The frame, which is aligned to the catalog
   equator and equinox, is Lorentzian and centered on the SSB.

   Summarizing, the specified pv-vector is for most stars almost
   identical to the result of applying the standard geometrical "space
   motion" transformation to the catalog data.  The differences, which
   are the subject of the Stumpff paper cited below, are:

   (i) In stars with significant radial velocity and proper motion,
   the constantly changing light-time distorts the apparent proper
   motion.  Note that this is a classical, not a relativistic, effect.

   (ii) The transformation complies with special relativity.

3) Care is needed with units.  The star coordinates are in radians and
   the proper motions in radians per Julian year, but the parallax is
   in arcseconds; the radial velocity is in km/s, but the pv-vector
   result is in au and au/day.

4) The proper motions are the rate of change of the right ascension
   and declination at the catalog epoch and are in radians per Julian
   year.  The RA proper motion is in terms of coordinate angle, not
   true angle, and will thus be numerically larger at high
   declinations.

5) Straight-line motion at constant speed in the inertial frame is
   assumed.  If the speed is greater than or equal to the speed of
   light, the function aborts with an error status.

6) The inverse transformation is performed by the function `starpv`.

# References

Stumpff, P., 1985, Astron.Astrophys. 144, 232-240.
"""
function pvstar(pv::Vector{Vector{Float64}})
    DC = SECPERDAY/(ASTRUNIT/LIGHTSPEED)
    #  Isolate the radial component of the velocity (AU/day, inertial).
    @inline vr = pn(pv[1])[2]'*pv[2]
    @inline ur = vr*(pn(pv[1])[2])
    #  Isolate the transverse component of the velocity (AU/day, inertial).
    @inline vt = pm(pv[2] .- ur)
    #  Special relativity dimensionless parameters.
    bett, betr = (vt, vr)./DC
    #  The observed-to-inertial correction terms.
    d, w = 1.0 + betr, betr^2 + bett^2
    @assert d != 0.0 || w <= 1.0 "Incorrect observed-to-inertial terms."
    ### w = betr != 0.0 ? (betr + w/(1+sqrt(1-w)))/(betr*d) : 1.0
    #  Scale inertial tangential velocity vector into observed (AU/day).
    #  Add them to obtain velocity vector (AU/day) and convert from
    #  cartesian to spherical
    ### θ, ϕ, r, dθ, dϕ, dr = pv2s([pv[1], w.*ur .+ (pv[2] .- ur)./d])
    θ, ϕ, r, dθ, dϕ, dr = pv2s([pv[1], (DC*(betr + w/(1+sqrt(1-w))).*pv[1]./norm(pv[1])
                                        .+ pv[2] .- ur)./d])
    NamedTuple{(:ras, :dec, :pmras, :pmdec, :plx, :rvel)}(
    (anp(θ), ϕ, DAYPERYEAR*dθ, DAYPERYEAR*dϕ, ASECPERRAD/r, 1e-3*ASTRUNIT/SECPERDAY*dr))
end

const PXMIN = 1e-7
const VMAX  = 0.5
const IMAX  = 100

"""
    starpv(ras::Float64, dec::Float64, pmras::Float64, pmdec::Float64,
           plx::Float64, rvel::Float64)

Convert star catalog coordinates to position+velocity vector.

# Input (Note 1)

 - `ra`  -- right ascension (radians)
 - `dec` -- declination (radians)
 - `pmr` -- RA proper motion (radians/year)
 - `pmd` -- Dec proper motion (radians/year)
 - `px`  -- parallax (arcseconds)
 - `rv`  -- radial velocity (km/s, positive = receding)

# Output (Note 2)

 - `pv` -- pv-vector (au, au/day)

# Note

1) The star data accepted by this function are "observables" for an
   imaginary observer at the solar-system barycenter.  Proper motion
   and radial velocity are, strictly, in terms of barycentric
   coordinate time, TCB.  For most practical applications, it is
   permissible to neglect the distinction between TCB and ordinary
   "proper" time on Earth (TT/TAI).  The result will, as a rule, be
   limited by the intrinsic accuracy of the proper-motion and
   radial-velocity data; moreover, the pv-vector is likely to be
   merely an intermediate result, so that a change of time unit would
   cancel out overall.

   In accordance with normal star-catalog conventions, the object's
   right ascension and declination are freed from the effects of
   secular aberration.  The frame, which is aligned to the catalog
   equator and equinox, is Lorentzian and centered on the SSB.

2) The resulting position and velocity pv-vector is with respect to
   the same frame and, like the catalog coordinates, is freed from the
   effects of secular aberration.  Should the "coordinate direction",
   where the object was located at the catalog epoch, be required, it
   may be obtained by calculating the magnitude of the position vector
   pv[1][1:3] dividing by the speed of light in au/day to give the
   light-time, and then multiplying the space velocity pv[2][1:3] by
   this light-time and adding the result to pv[1][1:3].

   Summarizing, the pv-vector returned is for most stars almost
   identical to the result of applying the standard geometrical "space
   motion" transformation.  The differences, which are the subject of
   the Stumpff paper referenced below, are:

   (i) In stars with significant radial velocity and proper motion,
   the constantly changing light-time distorts the apparent proper
   motion.  Note that this is a classical, not a relativistic, effect.

   (ii) The transformation complies with special relativity.

3) Care is needed with units.  The star coordinates are in radians and
   the proper motions in radians per Julian year, but the parallax is
   in arcseconds; the radial velocity is in km/s, but the pv-vector
   result is in au and au/day.

4) The RA proper motion is in terms of coordinate angle, not true
   angle.  If the catalog uses arcseconds for both RA and Dec proper
   motions, the RA proper motion will need to be divided by cos(Dec)
   before use.

5) Straight-line motion at constant speed, in the inertial frame, is
   assumed.

6) An extremely small (or zero or negative) parallax is interpreted to
   mean that the object is on the "celestial sphere", the radius of
   which is an arbitrary (large) value (see the constant PXMIN).  When
   the distance is overridden in this way, the status, initially zero,
   has 1 added to it.

7) If the space velocity is a significant fraction of c (see the
   constant VMAX), it is arbitrarily set to zero.  When this action
   occurs, 2 is added to the status.

8) The relativistic adjustment involves an iterative calculation.  If
   the process fails to converge within a set number (IMAX) of
   iterations, 4 is added to the status.

9) The inverse transformation is performed by the function `pvstar`.

# References

Stumpff, P., 1985, Astron.Astrophys. 144, 232-240.
"""
function starpv(ras::Float64, dec::Float64, pmras::Float64, pmdec::Float64,
                plx::Float64, rvel::Float64)
    DC = SECPERDAY/(ASTRUNIT/LIGHTSPEED)
    #  Distance (AU).
    r  = 3600*rad2deg(1)/(plx >= PXMIN ? plx : PXMIN)
    #  Radial velocity (AU/day).
    dr = SECPERDAY*1e3/ASTRUNIT*rvel
    #  Proper motion (radian/day).
    dras, ddec = (pmras, pmdec)./DAYPERYEAR
    #  Convert to PV-vector (AU, AU/DAY).
    @inline pv = s2pv(ras, dec, r, dras, ddec, dr)
    #  If excessive velocity, arbitrarily set to zero.
    if pm(pv[2])/DC > VMAX
        pv[2] .= [0., 0., 0.]
    end
    #  Isolate radial and transverse components of velocity (AU/day).
    @inline vsr = pn(pv[1])[2]'*pv[2]
    @inline usr = vsr*pn(pv[1])[2]
    ust = pv[2] .- usr
    #  Special relativity dimensionless parameters
    betsr, betst = (vsr, pm(ust))./DC
    #  Determine the observed-to-inertial corrections terms.
    bett, betr = betst, betsr
    d, δ, od, oδ, odd, odδ = 0., 0., 0., 0., 0., 0.
    for j=1:IMAX
        d, w = 1 + betr, betr^2 + bett^2
        δ = -w/(1 + sqrt(1-w))
        betr, bett = d.*(betsr + δ, betst)
        if j > 1
            dd, dδ = abs(d - od), abs(δ - oδ)
            if j > 1 && dd >= odd && dδ >= odδ
                break
            end
            odd, odδ = dd, dδ
        end
        od, oδ = d, δ
    end
    ###  Replace observed radial and tangential velocities with inertial
    ###  values and combine them to obtain the inertial space velocity,
    ###pv[2] .= (betsr != 0. ? d + δ/betsr : 1.)*usr .+ d*ust
    #  Scale observed tangential velocity vector into inertial (AU/day) and
    #  compute inertial radial velocity vector (AU/day).
    pv[2] .= DC*(d*betsr + δ)*pn(pv[1])[2] .+ d*ust
    pv
end
